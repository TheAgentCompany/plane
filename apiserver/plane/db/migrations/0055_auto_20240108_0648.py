# Generated by Django 4.2.7 on 2024-01-08 06:48

from django.db import migrations


def widgets(apps, schema_editor):
    Widget = apps.get_model("db", "Widget")
    updated_widgets = []
    widgets_list = [
        {"key": "overview_stats", "filters": {}},
        {
            "key": "assigned_issues",
            "filters": {
                "duration": "this_week",
                "tab": "upcoming",
            },
        },
        {
            "key": "created_issues",
            "filters": {
                "duration": "this_week",
                "tab": "upcoming",
            },
        },
        {
            "key": "issues_by_state_groups",
            "filters": {
                "duration": "this_week",
            },
        },
        {
            "key": "issues_by_priority",
            "filters": {
                "duration": "this_week",
            },
        },
        {"key": "recent_activity", "filters": {}},
        {"key": "recent_projects", "filters": {}},
        {"key": "recent_collaborators", "filters": {}},
    ]
    for widget in widgets_list:
        updated_widgets.append(
            Widget(
                key=widget["key"],
                filters=widget["filters"],
            )
        )
    Widget.objects.bulk_create(updated_widgets, batch_size=100)


def dashboard(apps, schema_editor):
    Dashboard = apps.get_model("db", "Dashboard")
    User = apps.get_model("db", "User")
    updated_dashboard = []
    for user in User.objects.all():
        updated_dashboard.append(
            Dashboard(
                name="Home dashboard",
                description_html="<p></p>",
                identifier=None,
                owned_by=user,
                type="home",
                is_default=True,
            )
        )
    Dashboard.objects.bulk_create(updated_dashboard, batch_size=2000)


def dashboard_widgets(apps, schema_editor):
    Widget = apps.get_model("db", "Widget")
    Dashboard = apps.get_model("db", "Dashboard")
    DashboardWidget = apps.get_model("db", "DashboardWidget")
    updated_dashboard_widget = []

    for widget in Widget.objects.all():
        for dashboard in Dashboard.objects.all():
            updated_dashboard_widget.append(
                DashboardWidget(
                    widget_id=widget.id,
                    dashboard_id=dashboard.id,
                    is_visible=True,
                )
            )
    DashboardWidget.objects.bulk_create(updated_dashboard_widget, batch_size=2000)


class Migration(migrations.Migration):
    dependencies = [
        ("db", "0054_dashboard_widget_dashboardwidget"),
    ]

    operations = [
        migrations.RunPython(widgets),
        migrations.RunPython(dashboard),
        migrations.RunPython(dashboard_widgets),
    ]
