# Plane Frontend configuration
planeFrontend:
  image:
    repository: makeplane/plane-frontend
    tag: latest
    pullPolicy: IfNotPresent
    pullSecret: ""
  ingressRoute:
    enabled: false
    host: ""
    tls:
      secretName: ""
  ## resource requests/limits for the Pod template "base" container
  ## - spec for ResourceRequirements:
  ##   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  ##
  resources: {}
  config:
    # Frontend
    # Extra image domains that need to be added for Next Image
    NEXT_PUBLIC_EXTRA_IMAGE_DOMAINS: 
    # Google Client ID for Google OAuth
    NEXT_PUBLIC_GOOGLE_CLIENTID: 
    # Github ID for Github OAuth
    NEXT_PUBLIC_GITHUB_ID: 
    # Github App Name for GitHub Integration
    NEXT_PUBLIC_GITHUB_APP_NAME: 
    # Sentry DSN for error monitoring
    NEXT_PUBLIC_SENTRY_DSN: 
    # Enable/Disable OAUTH - default 0 for selfhosted instance 
    NEXT_PUBLIC_ENABLE_OAUTH: 0
    # Enable/Disable sentry
    NEXT_PUBLIC_ENABLE_SENTRY: 0
    # Enable/Disable session recording 
    NEXT_PUBLIC_ENABLE_SESSION_RECORDER: 0
    # Enable/Disable event tracking
    NEXT_PUBLIC_TRACK_EVENTS: 0
    # Slack for Slack Integration
    NEXT_PUBLIC_SLACK_CLIENT_ID: 


# Plane Backend configuration
planeBackend:
  image:
    repository: makeplane/plane-backend
    tag: latest
    pullPolicy: IfNotPresent
    pullSecret: ""

# Plane Api configuration
planeApi:
  ingressRoute:
    enabled: false
    host: ""
    tls:
      secretName: ""
  ## resource requests/limits for the Pod template "base" container
  ## - spec for ResourceRequirements:
  ##   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  ##
  resources: {}

  config:
    # Backend
    # Debug value for api server use it as 0 for production use
    DEBUG: 0

    # Error logs
    SENTRY_DSN: 

    # Database Settings
    DATABASE_URL: postgresql://plane:plane@plane-db/plane

    # Redis Settings
    REDIS_URL: "redis://plane-redis:6379/"

    # Email Settings
    EMAIL_HOST: ""
    EMAIL_HOST_USER: ""
    EMAIL_HOST_PASSWORD: ""
    EMAIL_PORT: 587
    EMAIL_FROM: "Team Plane <team@mailer.plane.so>"
    EMAIL_USE_TLS: "1"
    EMAIL_USE_SSL: "0"

    # AWS Settings
    AWS_REGION: ""
    AWS_ACCESS_KEY_ID: "access-key"
    AWS_SECRET_ACCESS_KEY: "secret-key"
    AWS_S3_BUCKET_NAME: "uploads"

    # GPT settings
    OPENAI_API_KEY: 
    GPT_ENGINE: 

    # Github
    GITHUB_CLIENT_SECRET:  # For fetching release notes

    # Settings related to Docker
    DOCKERIZED: 0
    # set to 1 If using the pre-configured minio setup 
    USE_MINIO: 0

    # Nginx Configuration
    NGINX_PORT:

    # Default Creds
    DEFAULT_EMAIL: "captain@plane.so"
    DEFAULT_PASSWORD: "password123"

    # SignUps
    ENABLE_SIGNUP: 1
    # Auto generated and Required that will be generated from setup.sh
    NEXT_PUBLIC_API_BASE_URL:
    SECRET_KEY:
    WEB_URL: 

# Plane Worker configuration
planeWorker:
  ## resource requests/limits for the Pod template "base" container
  ## - spec for ResourceRequirements:
  ##   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  ##
  resources: {}

# Plane Beat configuration
planeBeat:
  ## resource requests/limits for the Pod template "base" container
  ## - spec for ResourceRequirements:
  ##   https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  ##
  resources: {}

# -- Configuration values for the postgresql dependency.
# ref: https://github.com/bitnami/charts/tree/main/bitnami/postgresql
# @default -- see `values.yaml`
postgresql:
  ##
  ## Use the PostgreSQL chart dependency.
  ## Set to false if bringing your own PostgreSQL.
  enabled: true

  ## Authentication parameters
  auth:
    ## The name of an existing secret that contains the postgres password.
    existingSecret:
    ## PostgreSQL name for a custom user to create
    username: plane
    ## PostgreSQL password for the custom user to create. Ignored if `auth.existingSecret` with key `password` is provided
    password: plane
    ## PostgreSQL name for a custom database to create
    database: plane

  image:
    tag: "14.6.0-debian-11-r13"

  ## PostgreSQL Primary parameters
  primary:
    ##
    ## Persistent Volume Storage configuration.
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
    persistence:
      ##
      ## Enable PostgreSQL persistence using Persistent Volume Claims.
      enabled: true
      ##
      ## Persistent class
      # storageClass: classname
      ##
      ## Access modes:
      accessModes:
        - ReadWriteOnce
    ## PostgreSQL port
    service:
      ports:
        postgresql: "5432"

# -- Configuration values for the Redis dependency.
# ref: https://github.com/bitnami/charts/blob/master/bitnami/redis
# More documentation can be found here: https://artifacthub.io/packages/helm/bitnami/redis
# @default -- see `values.yaml`
redis:
  ##
  ## Use the redis chart dependency.
  ##
  ## If you are bringing your own redis, you can set the host in supersetNode.connections.redis_host
  ##
  ## Set to false if bringing your own redis.
  enabled: true
  ##
  ## Set architecture to standalone/replication
  architecture: standalone
  ##
  ## Auth configuration:
  ##
  auth:
    ## Enable password authentication
    enabled: false
    ## The name of an existing secret that contains the redis password.
    existingSecret: ""
    ## Name of the key containing the secret.
    existingSecretKey: ""
    ## Redis password
    password: superset
  ##
  ## Master configuration
  ##
  master:
    ##
    ## Image configuration
    # image:
    ##
    ## docker registry secret names (list)
    # pullSecrets: nil
    ##
    ## Configure persistance
    persistence:
      ##
      ## Use a PVC to persist data.
      enabled: false
      ##
      ## Persistent class
      # storageClass: classname
      ##
      ## Access mode:
      accessModes:
        - ReadWriteOnce

nodeSelector: {}

tolerations: []

affinity: {}

# -- TopologySpreadConstrains to be added to all deployments
topologySpreadConstraints: []
